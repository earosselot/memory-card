{"version":3,"sources":["components/Header.jsx","components/icons/Github.js","components/Footer.jsx","components/CardGame/ScoreBoard.jsx","components/CardGame/HighScoreBoard.jsx","components/CardGame/CardContainer.jsx","auxiliar.js","components/CardGame/Card.jsx","components/Main.jsx","App.jsx","index.js"],"names":["Header","className","SvgGithub","props","viewBox","xmlns","d","Footer","href","target","rel","Github","height","width","fill","ScoreBoard","score","HighScoreBoard","highScore","CardContainer","children","extractCharData","character","keys","newObject","Object","forEach","key","includes","shuffleArray","arr","sort","Math","random","Card","name","image","setScore","shuffleCards","finishGame","stage","startGame","useState","clicked","setClicked","useEffect","onClick","prevScore","src","alt","usePromise","task","state","setState","then","result","catch","error","Main","setHighScore","randomCharIds","arrayLength","maxNumber","randomNumberArray","length","randomNumber","floor","push","getCharacter","characters","loading","setStage","cardsJsxArray","charactersData","clearedCharactersData","extractCharacterData","map","id","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7dfc610b.chunk.js","sourcesContent":["import '../styles/Header.css'\n\nconst Header = () => {\n    return (\n        <header className=\"Header\">\n            <h1><span className=\"highlight-text\">Rick and Morty</span> Memory card Game</h1>\n        </header>\n    )\n}\n\nexport default Header","import * as React from \"react\";\n\nfunction SvgGithub(props) {\n  return (\n    <svg viewBox=\"0 0 1195 1195\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n      <path d=\"M85.333 653q0 166 95.5 298.5t247.5 185.5q6 1 10 1t6.5-1.5 4-3 2-5 .5-4.5v-101q-37 4-66-.5t-45.5-14-29-23.5-17-25.5-9-24-5.5-14.5q-9-15-27-27.5t-27-20-2-14.5q50-26 113 66 34 51 119 30 10-41 40-70-116-21-172-86t-56-158q0-87 55-151-22-65 6-137 29-2 65 11.5t50.5 23 25.5 17.5q57-16 128.5-16t129.5 16q13-9 29-19t49-21.5 61-9.5q27 71 6 135 56 64 56 152 0 92-56.5 157.5t-171.5 85.5q43 43 43 104v129q0 1 1 3 0 6 .5 9t4.5 6 11 3q154-52 251.5-185.5t97.5-300.5q0-104-40.5-199t-109-163.5-163.5-109-199-40.5-199 40.5-163.5 109-109 163.5-40.5 199z\" />\n    </svg>\n  );\n}\n\nexport default SvgGithub;\n","import './../styles/Footer.css'\nimport Github from './icons/Github'\n\nconst Footer = () => {\n    return (\n        <footer className=\"Footer\">\n            <p>2021 earosselot</p>\n            <a className=\"footer-link\" href=\"https://github.com/earosselot\" target=\"_blank\" rel=\"noreferrer\">\n                <Github height=\"2rem\" width=\"2rem\" fill=\"var(--darkblue100)\" />\n            </a>\n        </footer>\n    )\n}\n\nexport default Footer\n","\nconst ScoreBoard = (props) => {\n\n    return (\n        <div>\n            Score: {props.score}\n        </div>\n    )\n}\n\nexport default ScoreBoard","\nconst HighScoreBoard = (props) => {\n\n    return (\n        <div>\n            High Score: {props.highScore}\n        </div>\n    )\n}\n\nexport default HighScoreBoard","import '../../styles/CardContainer.css'\n\nconst CardContainer = ({ children }) => {\n    return <div className=\"Card-container\">{children}</div>\n}\n\nexport default CardContainer\n","\nexport const randomNumberArray = (arrayLength, maxNumber) => {\n    let randomNumberArray = []\n\n    while (randomNumberArray.length < arrayLength) {\n        let randomNumber = Math.floor((Math.random() * maxNumber) + 1)\n        if (!(randomNumberArray.includes(randomNumber))) {\n            randomNumberArray.push(randomNumber)\n        }\n    }\n    return randomNumberArray\n}\n\nexport const extractCharacterData = (charactersData) => {\n    let clearedCharactersData = []\n    charactersData.forEach(character => {\n        clearedCharactersData.push(extractCharData(character, \"id\", \"name\", \"image\"))\n    })\n    return clearedCharactersData\n}\n\nconst extractCharData = (character, ...keys) => {\n    const newObject = {}\n    Object.keys(character).forEach(key => {\n        if (keys.includes(key)) {\n            newObject[key] = character[key]\n        }\n    })\n    return newObject\n}\n\nexport const shuffleArray = (arr) => {\n    arr.sort(() => Math.random() - 0.5)\n    return arr\n}","import {useState, useEffect} from 'react'\nimport '../../styles/Card.css'\n\nconst Card = ({name, image, setScore, shuffleCards, finishGame, stage, startGame}) => {\n    const [clicked, setClicked] = useState(false)\n\n    const handleClick = () => {\n        if (!clicked && stage === 'inGame') {\n            setClicked(true)\n            setScore((prevScore) => prevScore + 1)\n            shuffleCards()\n        } else if (!clicked && stage === 'reset') {\n            startGame()\n            setClicked(true)\n            setScore((prevScore) => prevScore + 1)\n            shuffleCards()\n        } else {\n            finishGame()\n        }\n    }\n\n    useEffect(() => {\n        if (stage === 'reset') {\n            setClicked(false)\n        }\n    }, [stage]);\n\n    return (\n        <div className=\"Card\" onClick={handleClick}>\n            <img src={image}\n                 alt={name} />\n            <div className=\"card-name\">\n                <span>{name}</span>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Card","import ScoreBoard from \"./CardGame/ScoreBoard\";\nimport HighScoreBoard from \"./CardGame/HighScoreBoard\";\nimport CardContainer from \"./CardGame/CardContainer\";\nimport {useEffect, useState} from \"react\";\nimport {getCharacter} from \"rickmortyapi\";\nimport {randomNumberArray, extractCharacterData, shuffleArray} from \"../auxiliar\"\nimport Card from \"./CardGame/Card\";\nimport '../styles/Main.css'\n\n\nconst Main = () => {\n    const [score, setScore] = useState(0)\n    const [highScore, setHighScore] = useState(0)\n\n    const randomCharIds = randomNumberArray(18, 671)\n    //necesito un state card number que cuando cambia pide de nuevo personajes aleatorios\n    const [characters, loading, error] = usePromise(() => getCharacter(randomCharIds))\n\n    const [stage, setStage] = useState('inGame')\n\n    useEffect(() => {\n        if (highScore < score) {\n            setHighScore(score)\n        }\n    }, [score])\n\n    useEffect(() => {\n        if (stage === 'gameEnded') {\n            setScore(0)\n            setStage('reset')\n        }\n    }, [stage])\n\n    const finishGame = () => {\n        setStage('gameEnded')\n    }\n\n    const startGame = () => {\n        setStage('inGame')\n    }\n\n    const shuffleCards = () => {\n        shuffleArray(cardsJsxArray)\n    }\n\n    if (loading) return <section>Loading...</section>\n\n    if (error) return <section>An error occurred...</section>\n\n    let cardsJsxArray\n\n    if (!loading) {\n        cardsJsxArray = extractCharacterData(characters).map(character =>\n            <Card\n                key={character.id}\n                id={character.id}\n                name={character.name}\n                image={character.image}\n                setScore={setScore}\n                startGame={startGame}\n                finishGame={finishGame}\n                shuffleCards={shuffleCards}\n                stage={stage}\n            />)\n        shuffleArray(cardsJsxArray)\n    }\n\n    return (\n        <section className=\"Main\">\n            <header>\n                <ScoreBoard score={score} />\n                <HighScoreBoard highScore={highScore}/>\n            </header>\n            <CardContainer>{cardsJsxArray}</CardContainer>\n        </section>\n    )\n}\n\n\nconst usePromise = (task) => {\n    const [state, setState] = useState([null, true, null]);\n\n    useEffect(() => {\n        task()\n            .then(result => setState([result, false, null]))\n            .catch(error => setState([null, false, error]))\n    }, []) // << omit the condition here, functions don't equal each other²\n\n    return state\n}\n\n\nexport default Main","import Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Main from \"./components/Main\";\nimport './styles/App.css'\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n        <Header />\n        <Main />\n        <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}