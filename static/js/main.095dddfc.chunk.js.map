{"version":3,"sources":["components/Header.jsx","components/icons/Github.js","components/Footer.jsx","components/CardGame/ScoreBoard.jsx","components/CardGame/HighScoreBoard.jsx","components/CardGame/CardContainer.jsx","auxiliar.js","components/CardGame/Card.jsx","components/Main.jsx","App.js","index.js"],"names":["Header","className","SvgGithub","props","viewBox","xmlns","d","Footer","href","target","rel","Github","height","width","fill","ScoreBoard","score","HighScoreBoard","highScore","CardContainer","children","randomNumberArray","arrayLength","maxNumber","length","randomNumber","Math","floor","random","includes","push","Card","name","image","setScore","shuffleCards","finishGame","stage","startGame","useState","clicked","setClicked","useEffect","onClick","prevScore","src","alt","Difficulties","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","value","Main","setHighScore","charsNumber","setCharsNumber","characters","setCharacters","setStage","getCharacters","a","charactersNumberArray","fetch","join","response","json","data","newCharacters","map","character","id","console","log","arr","sort","htmlFor","onChange","event","difficulty","Button","variant","color","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.095dddfc.chunk.js","sourcesContent":["import '../styles/Header.css'\n\nconst Header = () => {\n    return (\n        <header className=\"Header\">\n            <h1><span className=\"highlight-text\">Rick and Morty</span> Memory card Game</h1>\n        </header>\n    )\n}\n\nexport default Header","import * as React from \"react\";\n\nfunction SvgGithub(props) {\n  return (\n    <svg viewBox=\"0 0 1195 1195\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n      <path d=\"M85.333 653q0 166 95.5 298.5t247.5 185.5q6 1 10 1t6.5-1.5 4-3 2-5 .5-4.5v-101q-37 4-66-.5t-45.5-14-29-23.5-17-25.5-9-24-5.5-14.5q-9-15-27-27.5t-27-20-2-14.5q50-26 113 66 34 51 119 30 10-41 40-70-116-21-172-86t-56-158q0-87 55-151-22-65 6-137 29-2 65 11.5t50.5 23 25.5 17.5q57-16 128.5-16t129.5 16q13-9 29-19t49-21.5 61-9.5q27 71 6 135 56 64 56 152 0 92-56.5 157.5t-171.5 85.5q43 43 43 104v129q0 1 1 3 0 6 .5 9t4.5 6 11 3q154-52 251.5-185.5t97.5-300.5q0-104-40.5-199t-109-163.5-163.5-109-199-40.5-199 40.5-163.5 109-109 163.5-40.5 199z\" />\n    </svg>\n  );\n}\n\nexport default SvgGithub;\n","import './../styles/Footer.css'\nimport Github from './icons/Github'\n\nconst Footer = () => {\n    return (\n        <footer className=\"Footer\">\n            <p>2021 earosselot</p>\n            <a className=\"footer-link\" href=\"https://github.com/earosselot\" target=\"_blank\" rel=\"noreferrer\">\n                <Github height=\"2rem\" width=\"2rem\" fill=\"var(--darkblue100)\" />\n            </a>\n        </footer>\n    )\n}\n\nexport default Footer\n","\nconst ScoreBoard = (props) => {\n\n    return (\n        <div className=\"score\">\n            Score: {props.score}\n        </div>\n    )\n}\n\nexport default ScoreBoard","\nconst HighScoreBoard = (props) => {\n\n    return (\n        <div className=\"score\">\n            High Score: {props.highScore}\n        </div>\n    )\n}\n\nexport default HighScoreBoard","import '../../styles/CardContainer.css'\n\nconst CardContainer = ({ children }) => {\n    return (\n      <div className=\"Card-container\">\n        {children}\n      </div>)\n}\n\nexport default CardContainer\n","\nexport const randomNumberArray = (arrayLength, maxNumber) => {\n    let randomNumberArray = []\n\n    while (randomNumberArray.length < arrayLength) {\n        let randomNumber = Math.floor((Math.random() * maxNumber) + 1)\n        if (!(randomNumberArray.includes(randomNumber))) {\n            randomNumberArray.push(randomNumber)\n        }\n    }\n    return randomNumberArray\n}\n\nexport const extractCharacterData = (charactersData) => {\n    let clearedCharactersData = []\n    charactersData.forEach(character => {\n        clearedCharactersData.push(extractCharData(character, \"id\", \"name\", \"image\"))\n    })\n    return clearedCharactersData\n}\n\nconst extractCharData = (character, ...keys) => {\n    const newObject = {}\n    Object.keys(character).forEach(key => {\n        if (keys.includes(key)) {\n            newObject[key] = character[key]\n        }\n    })\n    return newObject\n}\n\nexport const shuffleArray = (arr) => {\n    arr.sort(() => Math.random() - 0.5)\n    return arr\n}","import {useState, useEffect} from 'react'\nimport '../../styles/Card.css'\n\nfunction Card({name, image, setScore, shuffleCards, finishGame, stage, startGame}) {\n    const [clicked, setClicked] = useState(false)\n\n    const handleClick = () => {\n        if (!clicked && stage === 'inGame') {\n            setClicked(true)\n            setScore((prevScore) => prevScore + 1)\n            shuffleCards()\n        } else if (!clicked && stage === 'reset') {\n            startGame()\n            setClicked(true)\n            setScore((prevScore) => prevScore + 1)\n            shuffleCards()\n        } else {\n            finishGame()\n        }\n    }\n\n    useEffect(() => {\n        if (stage === 'reset') {\n            setClicked(false)\n        }\n    }, [stage]);\n\n    return (\n        <div className=\"Card\" onClick={handleClick}>\n            <img src={image}\n                 alt={name} />\n            <div className=\"card-name\">\n                <div>{name}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default Card","import ScoreBoard from \"./CardGame/ScoreBoard\";\nimport HighScoreBoard from \"./CardGame/HighScoreBoard\";\nimport CardContainer from \"./CardGame/CardContainer\";\nimport {useEffect, useState} from \"react\";\nimport {randomNumberArray, shuffleArray} from \"../auxiliar\"\nimport Card from \"./CardGame/Card\";\nimport '../styles/Main.css'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\n\nconst useStyles = makeStyles((theme) => (\n    {\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    })\n);\n\n\nconst Difficulties = [\n    {\n        value: 6,\n        name: 'Jerry (6)'\n    },\n    {\n        value: 10,\n        name: 'Morty (10)'\n    },\n    {\n        value: 16,\n        name: 'Rick (16)'\n    },\n    {\n        value: 20,\n        name: 'WubbaLubbaDubDub'\n    },\n]\n\nconst Main = () => {\n    const [score, setScore] = useState(0)\n    const [highScore, setHighScore] = useState(0)\n    const [charsNumber, setCharsNumber] = useState(6);\n    const [characters, setCharacters] = useState([])\n    const [stage, setStage] = useState('inGame')\n\n    useEffect(() => {\n        getCharacters()\n    }, [charsNumber]);\n\n    async function getCharacters() {\n        const charactersNumberArray = randomNumberArray(charsNumber, 671)\n        const response =\n          await fetch(`https://rickandmortyapi.com/api/character/${charactersNumberArray.join(',')}`)\n        const data = await response.json()\n        const newCharacters = data.map( character => {\n            return {\n                id: character.id,\n                name: character.name,\n                image: character.image,\n            }\n        })\n        setCharacters(newCharacters)\n    }\n\n    function handleDificultyChange(event) {\n        setCharsNumber(event.target.value)\n    }\n\n    useEffect(() => {\n        if (highScore < score) {\n            setHighScore(score)\n        }\n        if (score === charsNumber) {\n            console.log('end')\n            setStage('gameEnded')\n        }\n    }, [score])\n\n    useEffect(() => {\n        if (stage === 'gameEnded') {\n            setScore(0)\n            setStage('reset')\n            setCharacters([])\n            getCharacters()\n        }\n    }, [stage])\n\n    const finishGame = () => {\n        setStage('gameEnded')\n    }\n\n    const startGame = () => {\n        setStage('inGame')\n    }\n\n    const shuffleCards = () => {\n        const newCharacters = shuffleArray(characters)\n        setCharacters(newCharacters)\n    }\n\n    function getNewCards() {\n        getCharacters()\n        finishGame()\n    }\n\n    return (\n        <section className=\"Main\">\n            <header>\n                <ScoreBoard score={score} />\n                <HighScoreBoard highScore={highScore}/>\n                <form className=\"difficulty-form\">\n                    <label\n                      htmlFor=\"difficulty-select\"\n                      className=\"difficulty-label\">\n                        Dificulty\n                    </label>\n                    <select\n                      id=\"difficulty-select\"\n                      className=\"difficulty-select\"\n                      value={charsNumber}\n                      onChange={handleDificultyChange}\n                    >\n                        {Difficulties.map(difficulty =>\n                          <option value={difficulty.value} key={difficulty.value}>\n                              {difficulty.name}\n                          </option>\n                        )}\n                    </select>\n                </form>\n            </header>\n\n            <CardContainer>\n                {characters?.map(character => (\n                  <Card\n                    key={character.id}\n                    id={character.id}\n                    name={character.name}\n                    image={character.image}\n                    setScore={setScore}\n                    startGame={startGame}\n                    finishGame={finishGame}\n                    shuffleCards={shuffleCards}\n                    stage={stage}\n                  />\n                ))}\n            </CardContainer>\n\n            <Button onClick={getNewCards} variant=\"contained\" color=\"primary\">\n                Change Cards\n            </Button>\n        </section>\n    )\n}\n\nexport default Main\n","import Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Main from \"./components/Main\";\nimport './styles/App.css'\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n        <Header />\n        <Main />\n        <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}